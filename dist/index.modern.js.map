{"version":3,"file":"index.modern.js","sources":["../src/read-smore.js","../src/utils/index.js"],"sourcesContent":["import { getWordCount, getCharCount, trimSpaces } from './utils'\n;('use strict')\n\n/**\n * Defaults\n */\nconst defaultOptions = {\n  blockClassName: 'read-smore',\n  wordsCount: 30,\n  charsCount: null,\n  moreText: 'Read More',\n  lessText: 'Read Less',\n  isInline: false,\n  linkElement: 'a'\n}\n\n/**\n * ReadSmore\n * @author @stephenscaff\n * @param {HTML element} element\n * @param {Object} options\n * @returns\n */\nfunction ReadSmore(element, options) {\n  options = Object.assign({}, defaultOptions, options)\n\n  // Internal Settings\n  let settings = {\n    originalContentArr: [],\n    truncatedContentArr: []\n  }\n\n  /**\n   * Init plugin\n   * Loop over instances and begin truncation procress\n   * @public\n   */\n  function init() {\n    for (let i = 0, n = element.length; i < n; ++i) {\n      truncate(element[i], i)\n    }\n  }\n\n  /**\n   * Is Characters\n   * Utility to check if is chars mode\n   *\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   */\n  function isChars(el) {\n    if (\n      el.dataset.readSmoreChars !== undefined ||\n      options.charsCount !== null\n    ) {\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Is inline option\n   * @private\n   * @param {HTML element} el - element instance\n   * @returns {Bool}\n   */\n  function isInline(el) {\n    if (el.dataset.readSmoreInline !== undefined || options.isInline === true) {\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Get Count of characters or words.\n   * Favors Characters from data att, then option, then words.\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   * @returns {Number}\n   */\n  function getCount(el) {\n    if (el.dataset.readSmoreChars !== undefined) {\n      return parseInt(el.dataset.readSmoreChars)\n    }\n\n    if (options.charsCount !== null) {\n      return parseInt(options.charsCount)\n    }\n\n    if (el.dataset.readSmoreWords !== undefined) {\n      return parseInt(el.dataset.readSmoreWords)\n    }\n\n    if (options.wordsCount !== null) {\n      return parseInt(options.wordsCount)\n    }\n  }\n\n  /**\n   * Ellpise Content\n   * Handles content ellipse by words or charactes\n   * @private\n   * @param {String} str - content string.\n   * @param {Number} max - Number of words||chars2 to show before truncation.\n   * @param {Bool} isChars - is by chars\n   */\n  function ellipse(str, max, isChars = false) {\n    // Trim starting/ending empty spaces\n    const trimedSpaces = trimSpaces(str)\n\n    if (isChars) {\n      return (\n        trimedSpaces\n          .split('')\n          .slice(0, max - 1)\n          .join('') + '...'\n      )\n    }\n\n    return (\n      trimedSpaces\n        .split(/\\s+/)\n        .slice(0, max - 1)\n        .join(' ') + '...'\n    )\n  }\n\n  /**\n   * Truncate logic\n   * Gets user defined count for words/chars (set by data att, option or default),\n   * gets content's count by words/chars, if defined is less than content, truncate\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   * @param {Number} i - current instance index\n   */\n  function truncate(el, idx) {\n    const definedCount = getCount(el)\n    const originalContent = el.innerHTML\n    const truncateContent = ellipse(originalContent, definedCount, isChars(el))\n    const originalContentCount = isChars(el)\n      ? getCharCount(originalContent)\n      : getWordCount(originalContent)\n\n    settings.originalContentArr.push(originalContent)\n    settings.truncatedContentArr.push(truncateContent)\n\n    // bail if total count is less that original content count\n    if (definedCount < originalContentCount) {\n      el.innerHTML = settings.truncatedContentArr[idx]\n      let self = idx\n      createLink(self)\n    }\n  }\n\n  /**\n   * Creates and Inserts Read More Link\n   * @private\n   * @param {Number} idx - index reference of looped item\n   */\n  function createLink(idx) {\n    const isInlineLink = isInline(element[idx])\n    const linkWrap = document.createElement('span')\n    linkWrap.className = `${options.blockClassName}__link-wrap`\n    linkWrap.innerHTML = linkTmpl()\n\n    if (isInlineLink) {\n      handleInlineStyles(element[idx], linkWrap)\n    }\n    element[idx].after(linkWrap)\n    setupToggleEvents(idx, isInlineLink)\n  }\n\n  /**\n   * Read More Link Template\n   * @param {Number} idx\n   * @returns {String} - html string\n   */\n  function linkTmpl() {\n    return `\n      <${options.linkElement}\n        class=\"${options.blockClassName}__link\"\n        style=\"cursor:pointer\"\n        aria-expanded=\"false\"\n        tabIndex=\"0\">\n          ${options.moreText}\n      </${options.linkElement}>\n    `\n  }\n\n  /**\n   * Sets up and calls click and keyup (enter key) events\n   * @private\n   * @param {Number} idx - index of clicked link\n   * @param {Bool} isInlineLink - if link element is inline with content\n   */\n  function setupToggleEvents(idx, isInlineLink) {\n    const link = element[idx].nextSibling.firstElementChild\n    link.addEventListener('click', (event) =>\n      handleToggle(event, idx, isInlineLink)\n    )\n    link.addEventListener('keyup', (event) => {\n      if (event.keyCode === 13 && options.linkElement === 'a') handleToggle(event, idx, isInlineLink)\n    })\n  }\n\n  /**\n   * Toggle event\n   * @private\n   * @param {Event} e - click | keyup event\n   * @param {Number} idx - index of clicked link\n   * @param {Bool} isInlineLink - if link element is inline with content\n   */\n  function handleToggle(e, idx, isInlineLink) {\n    element[idx].classList.toggle('is-expanded')\n    const target = e.currentTarget\n    if (target.dataset.clicked !== 'true') {\n      element[idx].innerHTML = settings.originalContentArr[idx]\n      target.innerHTML = options.lessText\n      target.dataset.clicked = true\n      target.ariaExpanded = true\n      if (isInlineLink) handleInlineStyles(element[idx])\n    } else {\n      element[idx].innerHTML = settings.truncatedContentArr[idx]\n      target.innerHTML = options.moreText\n      target.dataset.clicked = false\n      target.ariaExpanded = false\n      if (isInlineLink) handleInlineStyles(element[idx])\n    }\n  }\n\n  /**\n   * Add styles for inline option\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   * @param {HTML Elmenent} link - link wrapper element\n   */\n  function handleInlineStyles(el, link) {\n    if (el) {\n      el.lastElementChild.style.display = 'inline'\n      el.style.display = 'inline'\n    }\n    if (link) link.style.display = 'inline'\n  }\n\n  // API\n  return {\n    init: init\n  }\n}\n\nexport default ReadSmore\n","'use strict'\n\n/**\n * Get Character Count\n * @param {string\n * @param {number}\n */\nexport function getCharCount(str) {\n  return str.length\n}\n\n/**\n * Get Word Count\n * @param {string}\n * @param {number}\n */\nexport function getWordCount(str) {\n  const words = removeTags(str).split(' ')\n  return words.filter((word) => word.trim() !== '').length\n}\n\n/**\n * Trim whitespace\n * @param {string}\n * @param {string}\n */\nexport function trimSpaces(str) {\n  return str.replace(/(^\\s*)|(\\s*$)/gi, '')\n}\n\n/**\n * Remove HTML Tags from string\n * @param {string}\n * @param {string}\n */\nexport function removeTags(str) {\n  if (str === null || str === '') {\n    return false\n  }\n\n  return str.replace(/<[^>]+>/g, '')\n}\n"],"names":["defaultOptions","blockClassName","wordsCount","charsCount","moreText","lessText","isInline","linkElement","ReadSmore","element","options","Object","assign","settings","originalContentArr","truncatedContentArr","isChars","el","undefined","dataset","readSmoreChars","truncate","idx","definedCount","parseInt","readSmoreWords","getCount","originalContent","innerHTML","truncateContent","str","max","trimedSpaces","replace","trimSpaces","split","slice","join","ellipse","originalContentCount","length","getWordCount","words","removeTags","filter","word","trim","push","isInlineLink","readSmoreInline","linkWrap","document","createElement","className","handleInlineStyles","after","link","nextSibling","firstElementChild","addEventListener","event","handleToggle","keyCode","setupToggleEvents","createLink","e","classList","toggle","target","currentTarget","clicked","ariaExpanded","lastElementChild","style","display","init","i","n"],"mappings":"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"}