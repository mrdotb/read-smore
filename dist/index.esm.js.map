{"version":3,"file":"index.esm.js","sources":["../src/read-smore.js","../src/utils/index.js"],"sourcesContent":["import { getWordCount, getCharCount, trimSpaces } from './utils'\n;('use strict')\n\n/**\n * Defaults\n */\nconst defaultOptions = {\n  blockClassName: 'read-smore',\n  wordsCount: 30,\n  charsCount: null,\n  moreText: 'Read More',\n  lessText: 'Read Less',\n  isInline: false,\n  linkElement: 'a'\n}\n\n/**\n * ReadSmore\n * @author @stephenscaff\n * @param {HTML element} element\n * @param {Object} options\n * @returns\n */\nfunction ReadSmore(element, options) {\n  options = Object.assign({}, defaultOptions, options)\n\n  // Internal Settings\n  let settings = {\n    originalContentArr: [],\n    truncatedContentArr: []\n  }\n\n  /**\n   * Init plugin\n   * Loop over instances and begin truncation procress\n   * @public\n   */\n  function init() {\n    for (let i = 0, n = element.length; i < n; ++i) {\n      truncate(element[i], i)\n    }\n  }\n\n  /**\n   * Is Characters\n   * Utility to check if is chars mode\n   *\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   */\n  function isChars(el) {\n    if (\n      el.dataset.readSmoreChars !== undefined ||\n      options.charsCount !== null\n    ) {\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Is inline option\n   * @private\n   * @param {HTML element} el - element instance\n   * @returns {Bool}\n   */\n  function isInline(el) {\n    if (el.dataset.readSmoreInline !== undefined || options.isInline === true) {\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Get Count of characters or words.\n   * Favors Characters from data att, then option, then words.\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   * @returns {Number}\n   */\n  function getCount(el) {\n    if (el.dataset.readSmoreChars !== undefined) {\n      return parseInt(el.dataset.readSmoreChars)\n    }\n\n    if (options.charsCount !== null) {\n      return parseInt(options.charsCount)\n    }\n\n    if (el.dataset.readSmoreWords !== undefined) {\n      return parseInt(el.dataset.readSmoreWords)\n    }\n\n    if (options.wordsCount !== null) {\n      return parseInt(options.wordsCount)\n    }\n  }\n\n  /**\n   * Ellpise Content\n   * Handles content ellipse by words or charactes\n   * @private\n   * @param {String} str - content string.\n   * @param {Number} max - Number of words||chars2 to show before truncation.\n   * @param {Bool} isChars - is by chars\n   */\n  function ellipse(str, max, isChars = false) {\n    // Trim starting/ending empty spaces\n    const trimedSpaces = trimSpaces(str)\n\n    if (isChars) {\n      return (\n        trimedSpaces\n          .split('')\n          .slice(0, max - 1)\n          .join('') + '...'\n      )\n    }\n\n    return (\n      trimedSpaces\n        .split(/\\s+/)\n        .slice(0, max - 1)\n        .join(' ') + '...'\n    )\n  }\n\n  /**\n   * Truncate logic\n   * Gets user defined count for words/chars (set by data att, option or default),\n   * gets content's count by words/chars, if defined is less than content, truncate\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   * @param {Number} i - current instance index\n   */\n  function truncate(el, idx) {\n    const definedCount = getCount(el)\n    const originalContent = el.innerHTML\n    const truncateContent = ellipse(originalContent, definedCount, isChars(el))\n    const originalContentCount = isChars(el)\n      ? getCharCount(originalContent)\n      : getWordCount(originalContent)\n\n    settings.originalContentArr.push(originalContent)\n    settings.truncatedContentArr.push(truncateContent)\n\n    // bail if total count is less that original content count\n    if (definedCount < originalContentCount) {\n      el.innerHTML = settings.truncatedContentArr[idx]\n      let self = idx\n      createLink(self)\n    }\n  }\n\n  /**\n   * Creates and Inserts Read More Link\n   * @private\n   * @param {Number} idx - index reference of looped item\n   */\n  function createLink(idx) {\n    const isInlineLink = isInline(element[idx])\n    const linkWrap = document.createElement('span')\n    linkWrap.className = `${options.blockClassName}__link-wrap`\n    linkWrap.innerHTML = linkTmpl()\n\n    if (isInlineLink) {\n      handleInlineStyles(element[idx], linkWrap)\n    }\n    element[idx].after(linkWrap)\n    setupToggleEvents(idx, isInlineLink)\n  }\n\n  /**\n   * Read More Link Template\n   * @param {Number} idx\n   * @returns {String} - html string\n   */\n  function linkTmpl() {\n    return `\n      <${options.linkElement}\n        class=\"${options.blockClassName}__link\"\n        style=\"cursor:pointer\"\n        aria-expanded=\"false\"\n        tabIndex=\"0\">\n          ${options.moreText}\n      </${options.linkElement}>\n    `\n  }\n\n  /**\n   * Sets up and calls click and keyup (enter key) events\n   * @private\n   * @param {Number} idx - index of clicked link\n   * @param {Bool} isInlineLink - if link element is inline with content\n   */\n  function setupToggleEvents(idx, isInlineLink) {\n    const link = element[idx].nextSibling.firstElementChild\n    link.addEventListener('click', (event) =>\n      handleToggle(event, idx, isInlineLink)\n    )\n    link.addEventListener('keyup', (event) => {\n      if (event.keyCode === 13 && options.linkElement === 'a') handleToggle(event, idx, isInlineLink)\n    })\n  }\n\n  /**\n   * Toggle event\n   * @private\n   * @param {Event} e - click | keyup event\n   * @param {Number} idx - index of clicked link\n   * @param {Bool} isInlineLink - if link element is inline with content\n   */\n  function handleToggle(e, idx, isInlineLink) {\n    element[idx].classList.toggle('is-expanded')\n    const target = e.currentTarget\n    if (target.dataset.clicked !== 'true') {\n      element[idx].innerHTML = settings.originalContentArr[idx]\n      target.innerHTML = options.lessText\n      target.dataset.clicked = true\n      target.ariaExpanded = true\n      if (isInlineLink) handleInlineStyles(element[idx])\n    } else {\n      element[idx].innerHTML = settings.truncatedContentArr[idx]\n      target.innerHTML = options.moreText\n      target.dataset.clicked = false\n      target.ariaExpanded = false\n      if (isInlineLink) handleInlineStyles(element[idx])\n    }\n  }\n\n  /**\n   * Add styles for inline option\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   * @param {HTML Elmenent} link - link wrapper element\n   */\n  function handleInlineStyles(el, link) {\n    if (el) {\n      el.lastElementChild.style.display = 'inline'\n      el.style.display = 'inline'\n    }\n    if (link) link.style.display = 'inline'\n  }\n\n  // API\n  return {\n    init: init\n  }\n}\n\nexport default ReadSmore\n","'use strict'\n\n/**\n * Get Character Count\n * @param {string\n * @param {number}\n */\nexport function getCharCount(str) {\n  return str.length\n}\n\n/**\n * Get Word Count\n * @param {string}\n * @param {number}\n */\nexport function getWordCount(str) {\n  const words = removeTags(str).split(' ')\n  return words.filter((word) => word.trim() !== '').length\n}\n\n/**\n * Trim whitespace\n * @param {string}\n * @param {string}\n */\nexport function trimSpaces(str) {\n  return str.replace(/(^\\s*)|(\\s*$)/gi, '')\n}\n\n/**\n * Remove HTML Tags from string\n * @param {string}\n * @param {string}\n */\nexport function removeTags(str) {\n  if (str === null || str === '') {\n    return false\n  }\n\n  return str.replace(/<[^>]+>/g, '')\n}\n"],"names":["defaultOptions","blockClassName","wordsCount","charsCount","moreText","lessText","isInline","linkElement","ReadSmore","element","options","Object","assign","settings","originalContentArr","truncatedContentArr","isChars","el","undefined","dataset","readSmoreChars","handleToggle","e","idx","isInlineLink","classList","toggle","target","currentTarget","clicked","innerHTML","ariaExpanded","handleInlineStyles","link","lastElementChild","style","display","init","i","n","length","definedCount","originalContent","truncateContent","originalContentCount","parseInt","readSmoreWords","getCount","str","max","trimedSpaces","trimSpaces","replace","split","slice","join","ellipse","filter","word","trim","push","readSmoreInline","linkWrap","document","createElement","className","after","nextSibling","firstElementChild","addEventListener","event","keyCode","setupToggleEvents","createLink","removeTags"],"mappings":"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"}